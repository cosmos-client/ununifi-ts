/* tslint:disable */
/* eslint-disable */
/**
 * UnUniFi - Legacy REST and gRPC Gateway docs
 * A REST interface for state queries, legacy transactions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountAll200Response
 */
export interface AccountAll200Response {
    /**
     * 
     * @type {Array<AuctionAll200ResponseAuctionsInner>}
     * @memberof AccountAll200Response
     */
    'accounts'?: Array<AuctionAll200ResponseAuctionsInner>;
}
/**
 * 
 * @export
 * @interface Auction200Response
 */
export interface Auction200Response {
    /**
     * 
     * @type {AuctionAll200ResponseAuctionsInner}
     * @memberof Auction200Response
     */
    'auction'?: AuctionAll200ResponseAuctionsInner;
}
/**
 * 
 * @export
 * @interface AuctionAll200Response
 */
export interface AuctionAll200Response {
    /**
     * 
     * @type {Array<AuctionAll200ResponseAuctionsInner>}
     * @memberof AuctionAll200Response
     */
    'auctions'?: Array<AuctionAll200ResponseAuctionsInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof AuctionAll200Response
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface AuctionAll200ResponseAuctionsInner
 */
export interface AuctionAll200ResponseAuctionsInner {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof AuctionAll200ResponseAuctionsInner
     */
    'type_url'?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof AuctionAll200ResponseAuctionsInner
     */
    'value'?: string;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface AuctionAll200ResponsePagination
 */
export interface AuctionAll200ResponsePagination {
    /**
     * 
     * @type {string}
     * @memberof AuctionAll200ResponsePagination
     */
    'next_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionAll200ResponsePagination
     */
    'total'?: string;
}
/**
 * 
 * @export
 * @interface AuctionAllDefaultResponse
 */
export interface AuctionAllDefaultResponse {
    /**
     * 
     * @type {string}
     * @memberof AuctionAllDefaultResponse
     */
    'error'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuctionAllDefaultResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuctionAllDefaultResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Array<AuctionAll200ResponseAuctionsInner>}
     * @memberof AuctionAllDefaultResponse
     */
    'details'?: Array<AuctionAll200ResponseAuctionsInner>;
}
/**
 * 
 * @export
 * @interface AuctionParams200Response
 */
export interface AuctionParams200Response {
    /**
     * 
     * @type {AuctionParams200ResponseParams}
     * @memberof AuctionParams200Response
     */
    'params'?: AuctionParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface AuctionParams200ResponseParams
 */
export interface AuctionParams200ResponseParams {
    /**
     * 
     * @type {string}
     * @memberof AuctionParams200ResponseParams
     */
    'max_auction_duration'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionParams200ResponseParams
     */
    'bid_duration'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionParams200ResponseParams
     */
    'increment_surplus'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionParams200ResponseParams
     */
    'increment_debt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuctionParams200ResponseParams
     */
    'increment_collateral'?: string;
}
/**
 * 
 * @export
 * @interface Balances200Response
 */
export interface Balances200Response {
    /**
     * 
     * @type {Array<CdpAll200ResponseCdpInnerCdpCollateral>}
     * @memberof Balances200Response
     */
    'balances'?: Array<CdpAll200ResponseCdpInnerCdpCollateral>;
}
/**
 * 
 * @export
 * @interface Cdp200Response
 */
export interface Cdp200Response {
    /**
     * 
     * @type {CdpAll200ResponseCdpInner}
     * @memberof Cdp200Response
     */
    'cdp'?: CdpAll200ResponseCdpInner;
}
/**
 * 
 * @export
 * @interface CdpAll200Response
 */
export interface CdpAll200Response {
    /**
     * 
     * @type {Array<CdpAll200ResponseCdpInner>}
     * @memberof CdpAll200Response
     */
    'cdp'?: Array<CdpAll200ResponseCdpInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof CdpAll200Response
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface CdpAll200ResponseCdpInner
 */
export interface CdpAll200ResponseCdpInner {
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdp}
     * @memberof CdpAll200ResponseCdpInner
     */
    'cdp'?: CdpAll200ResponseCdpInnerCdp;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof CdpAll200ResponseCdpInner
     */
    'collateral_value'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof CdpAll200ResponseCdpInner
     */
    'collateralization_ratio'?: string;
}
/**
 * 
 * @export
 * @interface CdpAll200ResponseCdpInnerCdp
 */
export interface CdpAll200ResponseCdpInnerCdp {
    /**
     * 
     * @type {string}
     * @memberof CdpAll200ResponseCdpInnerCdp
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpAll200ResponseCdpInnerCdp
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpAll200ResponseCdpInnerCdp
     */
    'type'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof CdpAll200ResponseCdpInnerCdp
     */
    'collateral'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof CdpAll200ResponseCdpInnerCdp
     */
    'principal'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof CdpAll200ResponseCdpInnerCdp
     */
    'accumulated_fees'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof CdpAll200ResponseCdpInnerCdp
     */
    'fees_updated'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpAll200ResponseCdpInnerCdp
     */
    'interest_factor'?: string;
}
/**
 * Coin defines a token with a denomination and an amount.  NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @export
 * @interface CdpAll200ResponseCdpInnerCdpCollateral
 */
export interface CdpAll200ResponseCdpInnerCdpCollateral {
    /**
     * 
     * @type {string}
     * @memberof CdpAll200ResponseCdpInnerCdpCollateral
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpAll200ResponseCdpInnerCdpCollateral
     */
    'amount'?: string;
}
/**
 * 
 * @export
 * @interface CdpParams200Response
 */
export interface CdpParams200Response {
    /**
     * 
     * @type {CdpParams200ResponseParams}
     * @memberof CdpParams200Response
     */
    'params'?: CdpParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface CdpParams200ResponseParams
 */
export interface CdpParams200ResponseParams {
    /**
     * 
     * @type {Array<CdpParams200ResponseParamsCollateralParamsInner>}
     * @memberof CdpParams200ResponseParams
     */
    'collateral_params'?: Array<CdpParams200ResponseParamsCollateralParamsInner>;
    /**
     * 
     * @type {Array<CdpParams200ResponseParamsDebtParamsInner>}
     * @memberof CdpParams200ResponseParams
     */
    'debt_params'?: Array<CdpParams200ResponseParamsDebtParamsInner>;
}
/**
 * 
 * @export
 * @interface CdpParams200ResponseParamsCollateralParamsInner
 */
export interface CdpParams200ResponseParamsCollateralParamsInner {
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'liquidation_ratio'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'debt_limit'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'stability_fee'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'auction_size'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'liquidation_penalty'?: string;
    /**
     * 
     * @type {number}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'prefix'?: number;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'spot_market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'liquidation_market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'keeper_reward_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'check_collateralization_index_count'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsCollateralParamsInner
     */
    'conversion_factor'?: string;
}
/**
 * 
 * @export
 * @interface CdpParams200ResponseParamsDebtParamsInner
 */
export interface CdpParams200ResponseParamsDebtParamsInner {
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'reference_asset'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'conversion_factor'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'debt_floor'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'global_debt_limit'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'debt_denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'surplus_auction_threshold'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'surplus_auction_lot'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'debt_auction_threshold'?: string;
    /**
     * 
     * @type {string}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'debt_auction_lot'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CdpParams200ResponseParamsDebtParamsInner
     */
    'circuit_breaker'?: boolean;
}
/**
 * message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageRequest
 */
export interface CosmosBaseQueryV1beta1PageRequest {
    /**
     * key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'key'?: string;
    /**
     * offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'offset'?: string;
    /**
     * limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'limit'?: string;
    /**
     * count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @type {boolean}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'count_total'?: boolean;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageResponse
 */
export interface CosmosBaseQueryV1beta1PageResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageResponse
     */
    'next_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageResponse
     */
    'total'?: string;
}
/**
 * Coin defines a token with a denomination and an amount.  NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @export
 * @interface CosmosBaseV1beta1Coin
 */
export interface CosmosBaseV1beta1Coin {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseV1beta1Coin
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseV1beta1Coin
     */
    'amount'?: string;
}
/**
 * 
 * @export
 * @interface DepositAll200Response
 */
export interface DepositAll200Response {
    /**
     * 
     * @type {Array<DepositAll200ResponseDepositsInner>}
     * @memberof DepositAll200Response
     */
    'deposits'?: Array<DepositAll200ResponseDepositsInner>;
}
/**
 * 
 * @export
 * @interface DepositAll200ResponseDepositsInner
 */
export interface DepositAll200ResponseDepositsInner {
    /**
     * 
     * @type {string}
     * @memberof DepositAll200ResponseDepositsInner
     */
    'cdp_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DepositAll200ResponseDepositsInner
     */
    'depositor'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof DepositAll200ResponseDepositsInner
     */
    'amount'?: CdpAll200ResponseCdpInnerCdpCollateral;
}
/**
 * 
 * @export
 * @interface EstimateMintAmount200Response
 */
export interface EstimateMintAmount200Response {
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof EstimateMintAmount200Response
     */
    'mint_amount'?: CdpAll200ResponseCdpInnerCdpCollateral;
}
/**
 * 
 * @export
 * @interface EstimateRedeemAmount200Response
 */
export interface EstimateRedeemAmount200Response {
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof EstimateRedeemAmount200Response
     */
    'redeem_amount'?: CdpAll200ResponseCdpInnerCdpCollateral;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface GoogleProtobufAny
 */
export interface GoogleProtobufAny {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    'type_url'?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface GrpcGatewayRuntimeError
 */
export interface GrpcGatewayRuntimeError {
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    'error'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcGatewayRuntimeError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    'message'?: string;
    /**
     * 
     * @type {Array<AuctionAll200ResponseAuctionsInner>}
     * @memberof GrpcGatewayRuntimeError
     */
    'details'?: Array<AuctionAll200ResponseAuctionsInner>;
}
/**
 * 
 * @export
 * @interface IncentiveParams200Response
 */
export interface IncentiveParams200Response {
    /**
     * 
     * @type {IncentiveParams200ResponseParams}
     * @memberof IncentiveParams200Response
     */
    'params'?: IncentiveParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface IncentiveParams200ResponseParams
 */
export interface IncentiveParams200ResponseParams {
    /**
     * 
     * @type {Array<IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner>}
     * @memberof IncentiveParams200ResponseParams
     */
    'cdp_minting_reward_periods'?: Array<IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner>;
    /**
     * 
     * @type {Array<IncentiveParams200ResponseParamsClaimMultipliersInner>}
     * @memberof IncentiveParams200ResponseParams
     */
    'claim_multipliers'?: Array<IncentiveParams200ResponseParamsClaimMultipliersInner>;
    /**
     * 
     * @type {string}
     * @memberof IncentiveParams200ResponseParams
     */
    'claim_end'?: string;
}
/**
 * 
 * @export
 * @interface IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner
 */
export interface IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner {
    /**
     * 
     * @type {boolean}
     * @memberof IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner
     */
    'collateral_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner
     */
    'end'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner
     */
    'rewards_per_second'?: CdpAll200ResponseCdpInnerCdpCollateral;
}
/**
 * 
 * @export
 * @interface IncentiveParams200ResponseParamsClaimMultipliersInner
 */
export interface IncentiveParams200ResponseParamsClaimMultipliersInner {
    /**
     * 
     * @type {string}
     * @memberof IncentiveParams200ResponseParamsClaimMultipliersInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncentiveParams200ResponseParamsClaimMultipliersInner
     */
    'months_lockup'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncentiveParams200ResponseParamsClaimMultipliersInner
     */
    'factor'?: string;
}
/**
 * 
 * @export
 * @interface IncentiveParamsDefaultResponse
 */
export interface IncentiveParamsDefaultResponse {
    /**
     * 
     * @type {string}
     * @memberof IncentiveParamsDefaultResponse
     */
    'error'?: string;
    /**
     * 
     * @type {number}
     * @memberof IncentiveParamsDefaultResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof IncentiveParamsDefaultResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Array<IncentiveParamsDefaultResponseDetailsInner>}
     * @memberof IncentiveParamsDefaultResponse
     */
    'details'?: Array<IncentiveParamsDefaultResponseDetailsInner>;
}
/**
 * 
 * @export
 * @interface IncentiveParamsDefaultResponseDetailsInner
 */
export interface IncentiveParamsDefaultResponseDetailsInner {
    /**
     * 
     * @type {string}
     * @memberof IncentiveParamsDefaultResponseDetailsInner
     */
    'type_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncentiveParamsDefaultResponseDetailsInner
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface MarketAll200Response
 */
export interface MarketAll200Response {
    /**
     * 
     * @type {Array<MarketAll200ResponseMarketsInner>}
     * @memberof MarketAll200Response
     */
    'markets'?: Array<MarketAll200ResponseMarketsInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof MarketAll200Response
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface MarketAll200ResponseMarketsInner
 */
export interface MarketAll200ResponseMarketsInner {
    /**
     * 
     * @type {string}
     * @memberof MarketAll200ResponseMarketsInner
     */
    'market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarketAll200ResponseMarketsInner
     */
    'base_asset'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarketAll200ResponseMarketsInner
     */
    'quote_asset'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MarketAll200ResponseMarketsInner
     */
    'oracles'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof MarketAll200ResponseMarketsInner
     */
    'active'?: boolean;
}
/**
 * 
 * @export
 * @interface OracleAll200Response
 */
export interface OracleAll200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof OracleAll200Response
     */
    'oracles'?: Array<string>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof OracleAll200Response
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface Price200Response
 */
export interface Price200Response {
    /**
     * 
     * @type {Price200ResponsePrice}
     * @memberof Price200Response
     */
    'price'?: Price200ResponsePrice;
}
/**
 * 
 * @export
 * @interface Price200ResponsePrice
 */
export interface Price200ResponsePrice {
    /**
     * 
     * @type {string}
     * @memberof Price200ResponsePrice
     */
    'market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Price200ResponsePrice
     */
    'price'?: string;
}
/**
 * 
 * @export
 * @interface PriceAll200Response
 */
export interface PriceAll200Response {
    /**
     * 
     * @type {Array<Price200ResponsePrice>}
     * @memberof PriceAll200Response
     */
    'prices'?: Array<Price200ResponsePrice>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof PriceAll200Response
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface PricefeedParams200Response
 */
export interface PricefeedParams200Response {
    /**
     * 
     * @type {PricefeedParams200ResponseParams}
     * @memberof PricefeedParams200Response
     */
    'params'?: PricefeedParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface PricefeedParams200ResponseParams
 */
export interface PricefeedParams200ResponseParams {
    /**
     * 
     * @type {Array<MarketAll200ResponseMarketsInner>}
     * @memberof PricefeedParams200ResponseParams
     */
    'markets'?: Array<MarketAll200ResponseMarketsInner>;
}
/**
 * 
 * @export
 * @interface RawPriceAll200Response
 */
export interface RawPriceAll200Response {
    /**
     * 
     * @type {Array<RawPriceAll200ResponsePricesInner>}
     * @memberof RawPriceAll200Response
     */
    'prices'?: Array<RawPriceAll200ResponsePricesInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof RawPriceAll200Response
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface RawPriceAll200ResponsePricesInner
 */
export interface RawPriceAll200ResponsePricesInner {
    /**
     * 
     * @type {string}
     * @memberof RawPriceAll200ResponsePricesInner
     */
    'market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RawPriceAll200ResponsePricesInner
     */
    'oracle_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof RawPriceAll200ResponsePricesInner
     */
    'price'?: string;
    /**
     * 
     * @type {string}
     * @memberof RawPriceAll200ResponsePricesInner
     */
    'expiry'?: string;
}
/**
 * 
 * @export
 * @interface Strategy200Response
 */
export interface Strategy200Response {
    /**
     * 
     * @type {StrategyAll200ResponseStrategiesInner}
     * @memberof Strategy200Response
     */
    'strategy'?: StrategyAll200ResponseStrategiesInner;
}
/**
 * 
 * @export
 * @interface StrategyAll200Response
 */
export interface StrategyAll200Response {
    /**
     * 
     * @type {Array<StrategyAll200ResponseStrategiesInner>}
     * @memberof StrategyAll200Response
     */
    'strategies'?: Array<StrategyAll200ResponseStrategiesInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof StrategyAll200Response
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface StrategyAll200ResponseStrategiesInner
 */
export interface StrategyAll200ResponseStrategiesInner {
    /**
     * 
     * @type {string}
     * @memberof StrategyAll200ResponseStrategiesInner
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof StrategyAll200ResponseStrategiesInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StrategyAll200ResponseStrategiesInner
     */
    'contract_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof StrategyAll200ResponseStrategiesInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiAuctionParams
 */
export interface UnunifiAuctionParams {
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    'max_auction_duration'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    'bid_duration'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    'increment_surplus'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    'increment_debt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    'increment_collateral'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiAuctionQueryAllAuctionResponse
 */
export interface UnunifiAuctionQueryAllAuctionResponse {
    /**
     * 
     * @type {Array<AuctionAll200ResponseAuctionsInner>}
     * @memberof UnunifiAuctionQueryAllAuctionResponse
     */
    'auctions'?: Array<AuctionAll200ResponseAuctionsInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof UnunifiAuctionQueryAllAuctionResponse
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface UnunifiAuctionQueryGetAuctionResponse
 */
export interface UnunifiAuctionQueryGetAuctionResponse {
    /**
     * 
     * @type {AuctionAll200ResponseAuctionsInner}
     * @memberof UnunifiAuctionQueryGetAuctionResponse
     */
    'auction'?: AuctionAll200ResponseAuctionsInner;
}
/**
 * 
 * @export
 * @interface UnunifiAuctionQueryParamsResponse
 */
export interface UnunifiAuctionQueryParamsResponse {
    /**
     * 
     * @type {AuctionParams200ResponseParams}
     * @memberof UnunifiAuctionQueryParamsResponse
     */
    'params'?: AuctionParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface UnunifiCdpAugmentedCdp
 */
export interface UnunifiCdpAugmentedCdp {
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdp}
     * @memberof UnunifiCdpAugmentedCdp
     */
    'cdp'?: CdpAll200ResponseCdpInnerCdp;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiCdpAugmentedCdp
     */
    'collateral_value'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpAugmentedCdp
     */
    'collateralization_ratio'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiCdpCdp
 */
export interface UnunifiCdpCdp {
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    'type'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiCdpCdp
     */
    'collateral'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiCdpCdp
     */
    'principal'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiCdpCdp
     */
    'accumulated_fees'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    'fees_updated'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    'interest_factor'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiCdpCollateralParam
 */
export interface UnunifiCdpCollateralParam {
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'liquidation_ratio'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiCdpCollateralParam
     */
    'debt_limit'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'stability_fee'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'auction_size'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'liquidation_penalty'?: string;
    /**
     * 
     * @type {number}
     * @memberof UnunifiCdpCollateralParam
     */
    'prefix'?: number;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'spot_market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'liquidation_market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'keeper_reward_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'check_collateralization_index_count'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    'conversion_factor'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiCdpDebtParam
 */
export interface UnunifiCdpDebtParam {
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    'reference_asset'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    'conversion_factor'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    'debt_floor'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiCdpDebtParam
     */
    'global_debt_limit'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    'debt_denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    'surplus_auction_threshold'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    'surplus_auction_lot'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    'debt_auction_threshold'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    'debt_auction_lot'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UnunifiCdpDebtParam
     */
    'circuit_breaker'?: boolean;
}
/**
 * 
 * @export
 * @interface UnunifiCdpDeposit
 */
export interface UnunifiCdpDeposit {
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDeposit
     */
    'cdp_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDeposit
     */
    'depositor'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiCdpDeposit
     */
    'amount'?: CdpAll200ResponseCdpInnerCdpCollateral;
}
/**
 * 
 * @export
 * @interface UnunifiCdpParams
 */
export interface UnunifiCdpParams {
    /**
     * 
     * @type {Array<CdpParams200ResponseParamsCollateralParamsInner>}
     * @memberof UnunifiCdpParams
     */
    'collateral_params'?: Array<CdpParams200ResponseParamsCollateralParamsInner>;
    /**
     * 
     * @type {Array<CdpParams200ResponseParamsDebtParamsInner>}
     * @memberof UnunifiCdpParams
     */
    'debt_params'?: Array<CdpParams200ResponseParamsDebtParamsInner>;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryAllAccountResponse
 */
export interface UnunifiCdpQueryAllAccountResponse {
    /**
     * 
     * @type {Array<AuctionAll200ResponseAuctionsInner>}
     * @memberof UnunifiCdpQueryAllAccountResponse
     */
    'accounts'?: Array<AuctionAll200ResponseAuctionsInner>;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryAllCdpResponse
 */
export interface UnunifiCdpQueryAllCdpResponse {
    /**
     * 
     * @type {Array<CdpAll200ResponseCdpInner>}
     * @memberof UnunifiCdpQueryAllCdpResponse
     */
    'cdp'?: Array<CdpAll200ResponseCdpInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof UnunifiCdpQueryAllCdpResponse
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryAllDepositResponse
 */
export interface UnunifiCdpQueryAllDepositResponse {
    /**
     * 
     * @type {Array<DepositAll200ResponseDepositsInner>}
     * @memberof UnunifiCdpQueryAllDepositResponse
     */
    'deposits'?: Array<DepositAll200ResponseDepositsInner>;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryGetCdpResponse
 */
export interface UnunifiCdpQueryGetCdpResponse {
    /**
     * 
     * @type {CdpAll200ResponseCdpInner}
     * @memberof UnunifiCdpQueryGetCdpResponse
     */
    'cdp'?: CdpAll200ResponseCdpInner;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryParamsResponse
 */
export interface UnunifiCdpQueryParamsResponse {
    /**
     * 
     * @type {CdpParams200ResponseParams}
     * @memberof UnunifiCdpQueryParamsResponse
     */
    'params'?: CdpParams200ResponseParams;
}
/**
 * Params defines the parameters for the module.
 * @export
 * @interface UnunifiChainYieldaggregatorParams
 */
export interface UnunifiChainYieldaggregatorParams {
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorParams
     */
    'commission_rate'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiChainYieldaggregatorParams
     */
    'vault_creation_fee'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiChainYieldaggregatorParams
     */
    'vault_creation_deposit'?: CdpAll200ResponseCdpInnerCdpCollateral;
}
/**
 * 
 * @export
 * @interface UnunifiChainYieldaggregatorQueryAllStrategyResponse
 */
export interface UnunifiChainYieldaggregatorQueryAllStrategyResponse {
    /**
     * 
     * @type {Array<StrategyAll200ResponseStrategiesInner>}
     * @memberof UnunifiChainYieldaggregatorQueryAllStrategyResponse
     */
    'strategies'?: Array<StrategyAll200ResponseStrategiesInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof UnunifiChainYieldaggregatorQueryAllStrategyResponse
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface UnunifiChainYieldaggregatorQueryAllVaultResponse
 */
export interface UnunifiChainYieldaggregatorQueryAllVaultResponse {
    /**
     * 
     * @type {Array<VaultAll200ResponseVaultsInner>}
     * @memberof UnunifiChainYieldaggregatorQueryAllVaultResponse
     */
    'vaults'?: Array<VaultAll200ResponseVaultsInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof UnunifiChainYieldaggregatorQueryAllVaultResponse
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface UnunifiChainYieldaggregatorQueryEstimateMintAmountResponse
 */
export interface UnunifiChainYieldaggregatorQueryEstimateMintAmountResponse {
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiChainYieldaggregatorQueryEstimateMintAmountResponse
     */
    'mint_amount'?: CdpAll200ResponseCdpInnerCdpCollateral;
}
/**
 * 
 * @export
 * @interface UnunifiChainYieldaggregatorQueryEstimateRedeemAmountResponse
 */
export interface UnunifiChainYieldaggregatorQueryEstimateRedeemAmountResponse {
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiChainYieldaggregatorQueryEstimateRedeemAmountResponse
     */
    'redeem_amount'?: CdpAll200ResponseCdpInnerCdpCollateral;
}
/**
 * 
 * @export
 * @interface UnunifiChainYieldaggregatorQueryGetStrategyResponse
 */
export interface UnunifiChainYieldaggregatorQueryGetStrategyResponse {
    /**
     * 
     * @type {StrategyAll200ResponseStrategiesInner}
     * @memberof UnunifiChainYieldaggregatorQueryGetStrategyResponse
     */
    'strategy'?: StrategyAll200ResponseStrategiesInner;
}
/**
 * 
 * @export
 * @interface UnunifiChainYieldaggregatorQueryGetVaultResponse
 */
export interface UnunifiChainYieldaggregatorQueryGetVaultResponse {
    /**
     * 
     * @type {VaultAll200ResponseVaultsInner}
     * @memberof UnunifiChainYieldaggregatorQueryGetVaultResponse
     */
    'vault'?: VaultAll200ResponseVaultsInner;
    /**
     * 
     * @type {Array<StrategyAll200ResponseStrategiesInner>}
     * @memberof UnunifiChainYieldaggregatorQueryGetVaultResponse
     */
    'strategies'?: Array<StrategyAll200ResponseStrategiesInner>;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface UnunifiChainYieldaggregatorQueryParamsResponse
 */
export interface UnunifiChainYieldaggregatorQueryParamsResponse {
    /**
     * 
     * @type {YieldAggregatorParams200ResponseParams}
     * @memberof UnunifiChainYieldaggregatorQueryParamsResponse
     */
    'params'?: YieldAggregatorParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface UnunifiChainYieldaggregatorStrategy
 */
export interface UnunifiChainYieldaggregatorStrategy {
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorStrategy
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorStrategy
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorStrategy
     */
    'contract_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorStrategy
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiChainYieldaggregatorStrategyWeight
 */
export interface UnunifiChainYieldaggregatorStrategyWeight {
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorStrategyWeight
     */
    'strategy_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorStrategyWeight
     */
    'weight'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiChainYieldaggregatorVault
 */
export interface UnunifiChainYieldaggregatorVault {
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorVault
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorVault
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorVault
     */
    'owner'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiChainYieldaggregatorVault
     */
    'owner_deposit'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorVault
     */
    'withdraw_commission_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiChainYieldaggregatorVault
     */
    'withdraw_reserve_rate'?: string;
    /**
     * 
     * @type {Array<VaultAll200ResponseVaultsInnerStrategyWeightsInner>}
     * @memberof UnunifiChainYieldaggregatorVault
     */
    'strategy_weights'?: Array<VaultAll200ResponseVaultsInnerStrategyWeightsInner>;
}
/**
 * 
 * @export
 * @interface UnunifiIncentiveMultiplier
 */
export interface UnunifiIncentiveMultiplier {
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveMultiplier
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveMultiplier
     */
    'months_lockup'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveMultiplier
     */
    'factor'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiIncentiveParams
 */
export interface UnunifiIncentiveParams {
    /**
     * 
     * @type {Array<IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner>}
     * @memberof UnunifiIncentiveParams
     */
    'cdp_minting_reward_periods'?: Array<IncentiveParams200ResponseParamsCdpMintingRewardPeriodsInner>;
    /**
     * 
     * @type {Array<IncentiveParams200ResponseParamsClaimMultipliersInner>}
     * @memberof UnunifiIncentiveParams
     */
    'claim_multipliers'?: Array<IncentiveParams200ResponseParamsClaimMultipliersInner>;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveParams
     */
    'claim_end'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiIncentiveQueryParamsResponse
 */
export interface UnunifiIncentiveQueryParamsResponse {
    /**
     * 
     * @type {IncentiveParams200ResponseParams}
     * @memberof UnunifiIncentiveQueryParamsResponse
     */
    'params'?: IncentiveParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface UnunifiIncentiveRewardPeriod
 */
export interface UnunifiIncentiveRewardPeriod {
    /**
     * 
     * @type {boolean}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    'collateral_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    'end'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    'rewards_per_second'?: CdpAll200ResponseCdpInnerCdpCollateral;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedCurrentPrice
 */
export interface UnunifiPricefeedCurrentPrice {
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedCurrentPrice
     */
    'market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedCurrentPrice
     */
    'price'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedMarket
 */
export interface UnunifiPricefeedMarket {
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedMarket
     */
    'market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedMarket
     */
    'base_asset'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedMarket
     */
    'quote_asset'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnunifiPricefeedMarket
     */
    'oracles'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnunifiPricefeedMarket
     */
    'active'?: boolean;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedParams
 */
export interface UnunifiPricefeedParams {
    /**
     * 
     * @type {Array<MarketAll200ResponseMarketsInner>}
     * @memberof UnunifiPricefeedParams
     */
    'markets'?: Array<MarketAll200ResponseMarketsInner>;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedPostedPrice
 */
export interface UnunifiPricefeedPostedPrice {
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedPostedPrice
     */
    'market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedPostedPrice
     */
    'oracle_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedPostedPrice
     */
    'price'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedPostedPrice
     */
    'expiry'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryAllMarketResponse
 */
export interface UnunifiPricefeedQueryAllMarketResponse {
    /**
     * 
     * @type {Array<MarketAll200ResponseMarketsInner>}
     * @memberof UnunifiPricefeedQueryAllMarketResponse
     */
    'markets'?: Array<MarketAll200ResponseMarketsInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof UnunifiPricefeedQueryAllMarketResponse
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryAllOracleResponse
 */
export interface UnunifiPricefeedQueryAllOracleResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnunifiPricefeedQueryAllOracleResponse
     */
    'oracles'?: Array<string>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof UnunifiPricefeedQueryAllOracleResponse
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryAllPriceResponse
 */
export interface UnunifiPricefeedQueryAllPriceResponse {
    /**
     * 
     * @type {Array<Price200ResponsePrice>}
     * @memberof UnunifiPricefeedQueryAllPriceResponse
     */
    'prices'?: Array<Price200ResponsePrice>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof UnunifiPricefeedQueryAllPriceResponse
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryAllRawPriceResponse
 */
export interface UnunifiPricefeedQueryAllRawPriceResponse {
    /**
     * 
     * @type {Array<RawPriceAll200ResponsePricesInner>}
     * @memberof UnunifiPricefeedQueryAllRawPriceResponse
     */
    'prices'?: Array<RawPriceAll200ResponsePricesInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof UnunifiPricefeedQueryAllRawPriceResponse
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryGetPriceResponse
 */
export interface UnunifiPricefeedQueryGetPriceResponse {
    /**
     * 
     * @type {Price200ResponsePrice}
     * @memberof UnunifiPricefeedQueryGetPriceResponse
     */
    'price'?: Price200ResponsePrice;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryParamsResponse
 */
export interface UnunifiPricefeedQueryParamsResponse {
    /**
     * 
     * @type {PricefeedParams200ResponseParams}
     * @memberof UnunifiPricefeedQueryParamsResponse
     */
    'params'?: PricefeedParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface UnunifiUnunifidistParams
 */
export interface UnunifiUnunifidistParams {
    /**
     * 
     * @type {boolean}
     * @memberof UnunifiUnunifidistParams
     */
    'active'?: boolean;
    /**
     * 
     * @type {Array<UnunifidistParams200ResponseParamsPeriodsInner>}
     * @memberof UnunifiUnunifidistParams
     */
    'periods'?: Array<UnunifidistParams200ResponseParamsPeriodsInner>;
}
/**
 * 
 * @export
 * @interface UnunifiUnunifidistPeriod
 */
export interface UnunifiUnunifidistPeriod {
    /**
     * 
     * @type {string}
     * @memberof UnunifiUnunifidistPeriod
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiUnunifidistPeriod
     */
    'end'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiUnunifidistPeriod
     */
    'inflation'?: string;
}
/**
 * 
 * @export
 * @interface UnunifiUnunifidistQueryGetBalancesResponse
 */
export interface UnunifiUnunifidistQueryGetBalancesResponse {
    /**
     * 
     * @type {Array<CdpAll200ResponseCdpInnerCdpCollateral>}
     * @memberof UnunifiUnunifidistQueryGetBalancesResponse
     */
    'balances'?: Array<CdpAll200ResponseCdpInnerCdpCollateral>;
}
/**
 * 
 * @export
 * @interface UnunifiUnunifidistQueryParamsResponse
 */
export interface UnunifiUnunifidistQueryParamsResponse {
    /**
     * 
     * @type {UnunifidistParams200ResponseParams}
     * @memberof UnunifiUnunifidistQueryParamsResponse
     */
    'params'?: UnunifidistParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface UnunifidistParams200Response
 */
export interface UnunifidistParams200Response {
    /**
     * 
     * @type {UnunifidistParams200ResponseParams}
     * @memberof UnunifidistParams200Response
     */
    'params'?: UnunifidistParams200ResponseParams;
}
/**
 * 
 * @export
 * @interface UnunifidistParams200ResponseParams
 */
export interface UnunifidistParams200ResponseParams {
    /**
     * 
     * @type {boolean}
     * @memberof UnunifidistParams200ResponseParams
     */
    'active'?: boolean;
    /**
     * 
     * @type {Array<UnunifidistParams200ResponseParamsPeriodsInner>}
     * @memberof UnunifidistParams200ResponseParams
     */
    'periods'?: Array<UnunifidistParams200ResponseParamsPeriodsInner>;
}
/**
 * 
 * @export
 * @interface UnunifidistParams200ResponseParamsPeriodsInner
 */
export interface UnunifidistParams200ResponseParamsPeriodsInner {
    /**
     * 
     * @type {string}
     * @memberof UnunifidistParams200ResponseParamsPeriodsInner
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifidistParams200ResponseParamsPeriodsInner
     */
    'end'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifidistParams200ResponseParamsPeriodsInner
     */
    'inflation'?: string;
}
/**
 * 
 * @export
 * @interface Vault200Response
 */
export interface Vault200Response {
    /**
     * 
     * @type {VaultAll200ResponseVaultsInner}
     * @memberof Vault200Response
     */
    'vault'?: VaultAll200ResponseVaultsInner;
    /**
     * 
     * @type {Array<StrategyAll200ResponseStrategiesInner>}
     * @memberof Vault200Response
     */
    'strategies'?: Array<StrategyAll200ResponseStrategiesInner>;
}
/**
 * 
 * @export
 * @interface VaultAll200Response
 */
export interface VaultAll200Response {
    /**
     * 
     * @type {Array<VaultAll200ResponseVaultsInner>}
     * @memberof VaultAll200Response
     */
    'vaults'?: Array<VaultAll200ResponseVaultsInner>;
    /**
     * 
     * @type {AuctionAll200ResponsePagination}
     * @memberof VaultAll200Response
     */
    'pagination'?: AuctionAll200ResponsePagination;
}
/**
 * 
 * @export
 * @interface VaultAll200ResponseVaultsInner
 */
export interface VaultAll200ResponseVaultsInner {
    /**
     * 
     * @type {string}
     * @memberof VaultAll200ResponseVaultsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof VaultAll200ResponseVaultsInner
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof VaultAll200ResponseVaultsInner
     */
    'owner'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof VaultAll200ResponseVaultsInner
     */
    'owner_deposit'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof VaultAll200ResponseVaultsInner
     */
    'withdraw_commission_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof VaultAll200ResponseVaultsInner
     */
    'withdraw_reserve_rate'?: string;
    /**
     * 
     * @type {Array<VaultAll200ResponseVaultsInnerStrategyWeightsInner>}
     * @memberof VaultAll200ResponseVaultsInner
     */
    'strategy_weights'?: Array<VaultAll200ResponseVaultsInnerStrategyWeightsInner>;
}
/**
 * 
 * @export
 * @interface VaultAll200ResponseVaultsInnerStrategyWeightsInner
 */
export interface VaultAll200ResponseVaultsInnerStrategyWeightsInner {
    /**
     * 
     * @type {string}
     * @memberof VaultAll200ResponseVaultsInnerStrategyWeightsInner
     */
    'strategy_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof VaultAll200ResponseVaultsInnerStrategyWeightsInner
     */
    'weight'?: string;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface YieldAggregatorParams200Response
 */
export interface YieldAggregatorParams200Response {
    /**
     * 
     * @type {YieldAggregatorParams200ResponseParams}
     * @memberof YieldAggregatorParams200Response
     */
    'params'?: YieldAggregatorParams200ResponseParams;
}
/**
 * params holds all the parameters of this module.
 * @export
 * @interface YieldAggregatorParams200ResponseParams
 */
export interface YieldAggregatorParams200ResponseParams {
    /**
     * 
     * @type {string}
     * @memberof YieldAggregatorParams200ResponseParams
     */
    'commission_rate'?: string;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof YieldAggregatorParams200ResponseParams
     */
    'vault_creation_fee'?: CdpAll200ResponseCdpInnerCdpCollateral;
    /**
     * 
     * @type {CdpAll200ResponseCdpInnerCdpCollateral}
     * @memberof YieldAggregatorParams200ResponseParams
     */
    'vault_creation_deposit'?: CdpAll200ResponseCdpInnerCdpCollateral;
}

/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/cdp/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auction: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auction', 'id', id)
            const localVarPath = `/ununifi/auction/auctions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionAll: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/auction/auctions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/auction/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balances: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/ununifidist/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdp: async (owner: string, collateralType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('cdp', 'owner', owner)
            // verify required parameter 'collateralType' is not null or undefined
            assertParamExists('cdp', 'collateralType', collateralType)
            const localVarPath = `/ununifi/cdp/cdps/owners/{owner}/collateral-types/{collateral_type}/cdp`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"collateral_type"}}`, encodeURIComponent(String(collateralType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdpAll: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/cdp/cdps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdpParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/cdp/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositAll: async (owner: string, collateralType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('depositAll', 'owner', owner)
            // verify required parameter 'collateralType' is not null or undefined
            assertParamExists('depositAll', 'collateralType', collateralType)
            const localVarPath = `/ununifi/cdp/deposits/owners/{owner}/collateral-types/{collateral_type}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"collateral_type"}}`, encodeURIComponent(String(collateralType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [depositAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateMintAmount: async (id: string, depositAmount?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('estimateMintAmount', 'id', id)
            const localVarPath = `/ununifi/yield-aggregator/vaults/{id}/estimate-mint-amount`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (depositAmount !== undefined) {
                localVarQueryParameter['deposit_amount'] = depositAmount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [burnAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateRedeemAmount: async (id: string, burnAmount?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('estimateRedeemAmount', 'id', id)
            const localVarPath = `/ununifi/yield-aggregator/vaults/{id}/estimate-redeem-amount`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (burnAmount !== undefined) {
                localVarQueryParameter['burn_amount'] = burnAmount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incentiveParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/incentive/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketAll: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/pricefeed/markets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oracleAll: async (marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('oracleAll', 'marketId', marketId)
            const localVarPath = `/ununifi/pricefeed/markets/{market_id}/oracles`
                .replace(`{${"market_id"}}`, encodeURIComponent(String(marketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} marketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        price: async (marketId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('price', 'marketId', marketId)
            const localVarPath = `/ununifi/pricefeed/markets/{market_id}/price`
                .replace(`{${"market_id"}}`, encodeURIComponent(String(marketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceAll: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/pricefeed/prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricefeedParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/pricefeed/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rawPriceAll: async (marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('rawPriceAll', 'marketId', marketId)
            const localVarPath = `/ununifi/pricefeed/markets/{market_id}/raw_prices`
                .replace(`{${"market_id"}}`, encodeURIComponent(String(marketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [denom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategy: async (id: string, denom?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('strategy', 'id', id)
            const localVarPath = `/ununifi/yield-aggregator/strategies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (denom !== undefined) {
                localVarQueryParameter['denom'] = denom;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [denom] 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyAll: async (denom?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/yield-aggregator/strategies/query-param`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (denom !== undefined) {
                localVarQueryParameter['denom'] = denom;
            }

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ununifidistParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/ununifidist/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vault: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vault', 'id', id)
            const localVarPath = `/ununifi/yield-aggregator/vaults/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultAll: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/yield-aggregator/vaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Parameters queries the parameters of the module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yieldAggregatorParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/yield-aggregator/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auction(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Auction200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auction(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuctionParams200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balances(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Balances200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balances(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cdp(owner: string, collateralType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cdp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cdp(owner, collateralType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cdpAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CdpAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cdpAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cdpParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CdpParams200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cdpParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositAll(owner: string, collateralType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositAll(owner, collateralType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [depositAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async estimateMintAmount(id: string, depositAmount?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateMintAmount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.estimateMintAmount(id, depositAmount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [burnAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async estimateRedeemAmount(id: string, burnAmount?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateRedeemAmount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.estimateRedeemAmount(id, burnAmount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incentiveParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncentiveParams200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incentiveParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarketAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oracleAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OracleAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oracleAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} marketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async price(marketId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.price(marketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async priceAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PriceAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.priceAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pricefeedParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricefeedParams200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pricefeedParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rawPriceAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RawPriceAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rawPriceAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [denom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategy(id: string, denom?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Strategy200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategy(id, denom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [denom] 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategyAll(denom?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StrategyAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategyAll(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ununifidistParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnunifidistParams200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ununifidistParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vault(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vault200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vault(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Parameters queries the parameters of the module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yieldAggregatorParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<YieldAggregatorParams200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yieldAggregatorParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAll(options?: any): AxiosPromise<AccountAll200Response> {
            return localVarFp.accountAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auction(id: string, options?: any): AxiosPromise<Auction200Response> {
            return localVarFp.auction(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<AuctionAll200Response> {
            return localVarFp.auctionAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionParams(options?: any): AxiosPromise<AuctionParams200Response> {
            return localVarFp.auctionParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balances(options?: any): AxiosPromise<Balances200Response> {
            return localVarFp.balances(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdp(owner: string, collateralType: string, options?: any): AxiosPromise<Cdp200Response> {
            return localVarFp.cdp(owner, collateralType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdpAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<CdpAll200Response> {
            return localVarFp.cdpAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdpParams(options?: any): AxiosPromise<CdpParams200Response> {
            return localVarFp.cdpParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositAll(owner: string, collateralType: string, options?: any): AxiosPromise<DepositAll200Response> {
            return localVarFp.depositAll(owner, collateralType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [depositAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateMintAmount(id: string, depositAmount?: string, options?: any): AxiosPromise<EstimateMintAmount200Response> {
            return localVarFp.estimateMintAmount(id, depositAmount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [burnAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateRedeemAmount(id: string, burnAmount?: string, options?: any): AxiosPromise<EstimateRedeemAmount200Response> {
            return localVarFp.estimateRedeemAmount(id, burnAmount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incentiveParams(options?: any): AxiosPromise<IncentiveParams200Response> {
            return localVarFp.incentiveParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<MarketAll200Response> {
            return localVarFp.marketAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oracleAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<OracleAll200Response> {
            return localVarFp.oracleAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} marketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        price(marketId: string, options?: any): AxiosPromise<Price200Response> {
            return localVarFp.price(marketId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<PriceAll200Response> {
            return localVarFp.priceAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricefeedParams(options?: any): AxiosPromise<PricefeedParams200Response> {
            return localVarFp.pricefeedParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rawPriceAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<RawPriceAll200Response> {
            return localVarFp.rawPriceAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [denom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategy(id: string, denom?: string, options?: any): AxiosPromise<Strategy200Response> {
            return localVarFp.strategy(id, denom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [denom] 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategyAll(denom?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<StrategyAll200Response> {
            return localVarFp.strategyAll(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ununifidistParams(options?: any): AxiosPromise<UnunifidistParams200Response> {
            return localVarFp.ununifidistParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vault(id: string, options?: any): AxiosPromise<Vault200Response> {
            return localVarFp.vault(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<VaultAll200Response> {
            return localVarFp.vaultAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Parameters queries the parameters of the module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yieldAggregatorParams(options?: any): AxiosPromise<YieldAggregatorParams200Response> {
            return localVarFp.yieldAggregatorParams(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public accountAll(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).accountAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this line is used by starport scaffolding # 2
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public auction(id: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).auction(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public auctionAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).auctionAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public auctionParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).auctionParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this line is used by starport scaffolding # 2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public balances(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).balances(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this line is used by starport scaffolding # 2
     * @param {string} owner 
     * @param {string} collateralType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public cdp(owner: string, collateralType: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).cdp(owner, collateralType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public cdpAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).cdpAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public cdpParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).cdpParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} owner 
     * @param {string} collateralType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public depositAll(owner: string, collateralType: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).depositAll(owner, collateralType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [depositAmount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public estimateMintAmount(id: string, depositAmount?: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).estimateMintAmount(id, depositAmount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [burnAmount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public estimateRedeemAmount(id: string, burnAmount?: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).estimateRedeemAmount(id, burnAmount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public incentiveParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).incentiveParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this line is used by starport scaffolding # 2
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public marketAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).marketAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} marketId 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public oracleAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).oracleAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} marketId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public price(marketId: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).price(marketId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public priceAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).priceAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public pricefeedParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).pricefeedParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} marketId 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public rawPriceAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).rawPriceAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [denom] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public strategy(id: string, denom?: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).strategy(id, denom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [denom] 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public strategyAll(denom?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).strategyAll(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public ununifidistParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).ununifidistParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public vault(id: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).vault(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this line is used by starport scaffolding # 2
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public vaultAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).vaultAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Parameters queries the parameters of the module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public yieldAggregatorParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).yieldAggregatorParams(options).then((request) => request(this.axios, this.basePath));
    }
}


